import fs from 'fs/promises';
import path from 'path';

/**
 * @typedef {import('./prompter.js').ManualFixDecision} ManualFixDecision
 * @typedef {import('./prompter.js').EmptyTranslationFixDecision} EmptyTranslationFixDecision
 * @typedef {import('./validator.js').ValidationError} ValidationError
 */

export async function fixDuplicatesAutomatically(duplicateErrors) {
  if (!duplicateErrors || duplicateErrors.length === 0) {
    console.log('\nÊ≤°ÊúâÂèëÁé∞ÂèØËá™Âä®‰øÆÂ§çÁöÑÈáçÂ§çÊù°ÁõÆ„ÄÇ');
    return;
  }
  const linesToRemoveByFile = {};
  for (const error of duplicateErrors) {
    if (!linesToRemoveByFile[error.file]) {
      linesToRemoveByFile[error.file] = new Set();
    }
    error.occurrences.slice(1).forEach(occ => {
      linesToRemoveByFile[error.file].add(occ.line);
    });
  }
  let totalFixed = 0;
  for (const file in linesToRemoveByFile) {
    const linesToRemove = Array.from(linesToRemoveByFile[file]);
    if (linesToRemove.length === 0) continue;
    totalFixed += linesToRemove.length;
    console.log(`\nüîß Ê≠£Âú®Ëá™Âä®‰øÆÂ§çÊñá‰ª∂ ${path.basename(file)}ÔºåÁßªÈô§ ${linesToRemove.length} ‰∏™ÈáçÂ§çÊù°ÁõÆ...`);
    const content = await fs.readFile(file, 'utf-8');
    const lines = content.split('\n');
    linesToRemove.sort((a, b) => b - a);
    for (const lineNumber of linesToRemove) {
      lines.splice(lineNumber - 1, 1);
    }
    const fixedContent = lines.join('\n');
    await fs.writeFile(file, fixedContent, 'utf-8');
    console.log(`‚úÖ Êñá‰ª∂ ${path.basename(file)} Â∑≤ÊàêÂäüËá™Âä®‰øÆÂ§ç„ÄÇ`);
  }
  if (totalFixed > 0) {
      console.log(`\n‚ú® ÊÄªÂÖ±Ëá™Âä®‰øÆÂ§ç‰∫Ü ${totalFixed} ‰∏™ÈóÆÈ¢ò„ÄÇ`);
  }
}

export async function applyManualFixes(decisions) {
  if (!decisions || decisions.length === 0) {
    console.log('\nÊ≤°ÊúâÈúÄË¶ÅÂ∫îÁî®ÁöÑ‰øÆÂ§ç„ÄÇ');
    return;
  }
  const linesToRemoveByFile = {};
  for (const decision of decisions) {
    if (decision.lineToKeep === 'skip') {
      continue;
    }
    if (!linesToRemoveByFile[decision.file]) {
      linesToRemoveByFile[decision.file] = new Set();
    }
    decision.allOccurrences.forEach(occ => {
      if (occ.line !== decision.lineToKeep) {
        linesToRemoveByFile[decision.file].add(occ.line);
      }
    });
  }
  let totalFixed = 0;
  for (const file in linesToRemoveByFile) {
    const linesToRemove = Array.from(linesToRemoveByFile[file]);
    if (linesToRemove.length === 0) continue;
    totalFixed += linesToRemove.length;
    console.log(`\nüîß Ê≠£Âú®‰øÆÂ§çÊñá‰ª∂ ${path.basename(file)}ÔºåÁßªÈô§ ${linesToRemove.length} ‰∏™ÈáçÂ§çÊù°ÁõÆ...`);
    const content = await fs.readFile(file, 'utf-8');
    const lines = content.split('\n');
    linesToRemove.sort((a, b) => b - a);
    for (const lineNumber of linesToRemove) {
      lines.splice(lineNumber - 1, 1);
    }
    const fixedContent = lines.join('\n');
    await fs.writeFile(file, fixedContent, 'utf-8');
    console.log(`‚úÖ Êñá‰ª∂ ${path.basename(file)} Â∑≤ÊàêÂäü‰øÆÂ§ç„ÄÇ`);
  }
  if (totalFixed > 0) {
      console.log(`\n‚ú® ÊÄªÂÖ±‰øÆÂ§ç‰∫Ü ${totalFixed} ‰∏™ÈóÆÈ¢ò„ÄÇ`);
  } else {
      console.log('\nÊ≤°ÊúâÈúÄË¶ÅÂ∫îÁî®ÁöÑ‰øÆÂ§çÔºàÂèØËÉΩÊâÄÊúâÈóÆÈ¢òÈÉΩË¢´Ë∑≥Ëøá‰∫ÜÔºâ„ÄÇ');
  }
}

export async function applyEmptyTranslationFixes(decisions) {
  const fixesToApply = decisions.filter(d => d.newTranslation !== null);
  if (fixesToApply.length === 0) {
    console.log('\nÊ≤°ÊúâÈúÄË¶ÅÂ∫îÁî®ÁöÑÁ©∫ÁøªËØë‰øÆÂ§çÔºàÂèØËÉΩÊâÄÊúâÈóÆÈ¢òÈÉΩË¢´Ë∑≥Ëøá‰∫ÜÔºâ„ÄÇ');
    return;
  }
  const fixesByFile = fixesToApply.reduce((acc, decision) => {
    const file = decision.error.file;
    if (!acc[file]) {
      acc[file] = [];
    }
    acc[file].push(decision);
    return acc;
  }, {});
  let totalFixed = 0;
  for (const file in fixesByFile) {
    const fileDecisions = fixesByFile[file];
    totalFixed += fileDecisions.length;
    console.log(`\nüîß Ê≠£Âú®‰øÆÂ§çÊñá‰ª∂ ${path.basename(file)}ÔºåÊõ¥Êñ∞ ${fileDecisions.length} ‰∏™Á©∫ÁøªËØë...`);
    let content = await fs.readFile(file, 'utf-8');
    fileDecisions.sort((a, b) => b.error.node.range[0] - a.error.node.range[0]);
    for (const decision of fileDecisions) {
      const translationNode = decision.error.node.elements[1];
      const start = translationNode.range[0];
      const end = translationNode.range[1];
      const newTranslationString = JSON.stringify(decision.newTranslation);
      content = content.slice(0, start) + newTranslationString + content.slice(end);
    }
    await fs.writeFile(file, content, 'utf-8');
    console.log(`‚úÖ Êñá‰ª∂ ${path.basename(file)} Â∑≤ÊàêÂäü‰øÆÂ§ç„ÄÇ`);
  }
  if (totalFixed > 0) {
    console.log(`\n‚ú® ÊÄªÂÖ±Êõ¥Êñ∞‰∫Ü ${totalFixed} ‰∏™Á©∫ÁøªËØëÊù°ÁõÆ„ÄÇ`);
  }
}

export async function applySyntaxFixes(decisions) {
  if (!decisions || decisions.length === 0) {
    return;
  }
  const fixesByFile = decisions.reduce((acc, decision) => {
    const file = decision.file;
    if (!acc[file]) {
      acc[file] = [];
    }
    acc[file].push(decision);
    return acc;
  }, {});
  let totalFixed = 0;
  for (const file in fixesByFile) {
    const fileDecisions = fixesByFile[file];
    totalFixed += fileDecisions.length;
    console.log(`\nüîß Ê≠£Âú®‰øÆÂ§çÊñá‰ª∂ ${path.basename(file)} ‰∏≠ÁöÑ ${fileDecisions.length} ‰∏™ËØ≠Ê≥ïÈóÆÈ¢ò...`);
    const content = await fs.readFile(file, 'utf-8');
    const lines = content.split('\n');
    for (const decision of fileDecisions) {
      if (decision.line > 0 && decision.line <= lines.length) {
        lines[decision.line - 1] = decision.fixedLine;
      }
    }
    const fixedContent = lines.join('\n');
    await fs.writeFile(file, fixedContent, 'utf-8');
    console.log(`‚úÖ Êñá‰ª∂ ${path.basename(file)} Â∑≤ÊàêÂäü‰øÆÂ§ç„ÄÇ`);
  }
  if (totalFixed > 0) {
    console.log(`\n‚ú® ÊÄªÂÖ±‰øÆÂ§ç‰∫Ü ${totalFixed} ‰∏™ËØ≠Ê≥ïÈóÆÈ¢ò„ÄÇ`);
  }
}

export async function applySingleCommaFix(error) {
  const file = error.file;
  let content = await fs.readFile(file, 'utf-8');
  content = content.slice(0, error.pos) + ',' + content.slice(error.pos);
  await fs.writeFile(file, content, 'utf-8');
}

export async function identifyHighConfidenceCommaErrors(errors) {
  const highConfidenceFixes = [];
  const lowConfidenceSkips = [];
  const fileContents = {};
  for (const error of errors) {
    if (!fileContents[error.file]) {
      fileContents[error.file] = (await fs.readFile(error.file, 'utf-8')).split('\n');
    }
    const lines = fileContents[error.file];
    const errorLine = lines[error.line - 1] || '';
    const nextLine = lines[error.line] || '';
    const trimmedErrorLine = errorLine.trim();
    if ((trimmedErrorLine.endsWith('],') || trimmedErrorLine.endsWith(']')) && nextLine.trim().startsWith('[')) {
      highConfidenceFixes.push(error);
    } else {
      lowConfidenceSkips.push(error);
    }
  }
  return { 
    highConfidenceFixes, 
    lowConfidenceSkips,
  };
}
